from flask import request
from flask_restful import Resource, abort, reqparse
import sys
import json
sys.path.append('../')
from modules.utils.jsonToken import UnpackToken
from modules.database.DB import DataBaseOpps as DB
from modules.APIs.service_supcription.SubcrptionStrategy_list import SubscriptionStrategyFactory, UnSubscriptionStrategyFactory

class Subscripe(Resource):
    """ /subscripe route. POST request. needs a service name and an optional service token.(default is True))
    Requires a valid login session (JWT token)
    Error codes:
    403: NO token provided
    401: Invalid token
    500: Internal server error
    200: Service added successfully."""
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('service', type=str, required=True)
        parser.add_argument('service_args', type=dict, required=False)
        args = parser.parse_args()
        authorization_header = request.headers.get('Authorization')
        if not authorization_header:
            return {"message": "No Authorization header provided"}, 403
        payload = UnpackToken(authorization_header, True)
        subStrategy_list = SubscriptionStrategyFactory()

        if payload:
            user = DB.GetUser(payload["username"])
            if user:
                try:
                    strategy = subStrategy_list.GetStrategy(args['service'])
                    if strategy:
                        responce_obj = strategy.execute(user, args['service_args'] if args['service_args'] else {"enabled": True})
                        # responce_obj will be generated by the strategy it should include the status code and the message,
                        # can also be a redirect
                        return responce_obj
                    else:
                        abort(400, message='Invalid service name')
                except Exception as e:
                    abort(500, message=str(e)) ## you get this it means that we fucked up with strageies
            else:
                abort(401, message='User not found')
        else:
            abort(403, message='Invalid credentials')

class Unsubscripe(Resource):
    """ /unsubscripe route. POST request. needs a service name and an optional service_args.
    Requires a valid login session (JWT token)
    Error codes:
    403: NO token provided
    401: Invalid token
    500: Internal server error
    200: Service removed successfully."""
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('service', type=str, required=True)
        parser.add_argument('service_args', type=str, required=False)
        args = parser.parse_args()
        authorization_header = request.headers.get('Authorization')
        if not authorization_header:
            return {"message": "No Authorization header provided"}, 403
        payload = UnpackToken(authorization_header, True)
        unsubStrategy_list = UnSubscriptionStrategyFactory()

        if payload:
            user = DB.GetUser(payload["username"])
            if user:
                try:
                    strategy = unsubStrategy_list.GetStrategy(args['service'])
                    if strategy:
                        responce_obj = strategy.execute(user, args['service_args'] if args['service_args'] else {"enabled": False})
                        return responce_obj
                    else:
                        abort(400, message='Invalid service name')
                except Exception as e:
                    abort(500, message=str(e))
            else:
                abort(401, message='User not found')
        else:
            abort(403, message='Invalid credentials')